"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var assign = _interopRequire(require("lodash.assign"));

var flow = _interopRequire(require("lodash.flow"));

var hljs = _interopRequire(require("highlight.js"));

var maybe = function (f) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    try {
      return f.apply(undefined, args);
    } catch (e) {
      return false;
    }
  };
};

var get = function (name) {
  return function (x) {
    return x[name];
  };
};
var maybeValue = function (f) {
  return maybe(flow(f, get("value")));
};

// Highlight with given language.
var highlight = function (code, lang) {
  return maybeValue(hljs.highlight)(lang, code, true) || "";
};

// Highlight with given language or automatically.
var highlightAuto = function (code, lang) {
  return lang ? highlight(code, lang) : maybeValue(hljs.highlightAuto)(code) || "";
};

// Wrap a render function to add `hljs` class to code blocks.
var wrap = function (render) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return render.apply(this, args).replace("<code class=\"", "<code class=\"hljs ").replace("<code>", "<code class=\"hljs\">");
  };
};

var highlightjs = function (md, opts) {
  opts = assign({}, highlightjs.defaults, opts);

  md.options.highlight = opts.auto ? highlightAuto : highlight;
  md.renderer.rules.fence = wrap(md.renderer.rules.fence);

  if (opts.code) {
    md.renderer.rules.code_block = wrap(md.renderer.rules.code_block);
  }
};

highlightjs.defaults = {
  auto: true,
  code: true
};

module.exports = highlightjs;
